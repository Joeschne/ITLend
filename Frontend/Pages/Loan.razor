@page "/loan"
@using System.Net.Http.Json
@using Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime




<div class="container mt-4">
    <h3>Student Details</h3>
    <!-- Search Section -->
    <div class="input-group mb-3">
        <span class="input-group-text">Benutzername</span>
        <InputText class="form-control" @bind-Value="username" placeholder="Enter username..." />
        <button class="btn btn-primary" @onclick="SearchStudent" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Ausleihen...</span>
            }
            else
            {
                <span>Ausleihen</span>
            }
        </button>
    </div>

    <!-- Student Edit Form in a Card -->
    <div class="card shadow-sm">
        <div class="card-header">
            <h5 class="card-title mb-0">Edit Student Information</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@student" OnValidSubmit="@SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Username</label>
                        <InputText class="form-control" @bind-Value="student.Username" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label">First Name</label>
                        <InputText class="form-control" @bind-Value="student.FirstName" />
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Last Name</label>
                        <InputText class="form-control" @bind-Value="student.LastName" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="student.Email" />
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Mobile Phone Number</label>
                        <InputText class="form-control" @bind-Value="student.MobilePhoneNumber" />
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Gender</label>
                        <InputText class="form-control" @bind-Value="student.Gender" />
                    </div>
                </div>

                <button type="submit" class="btn btn-success mt-2">Save</button>
            </EditForm>
        </div>
    </div>
</div>

<!-- Student Selection Modal -->
<div class="modal fade" tabindex="-1" id="studentModal" @ref="studentModalRef">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            @if (apiError)
            {
                <!-- If there's an error fetching -->
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">No Student found</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>We couldn't find a student with that username. You can search again or fill the details manually</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
            else if (!studentFound)
            {
                <!-- No student found -->
                <div class="modal-header bg-warning">
                    <h5 class="modal-title">No Student Found</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>We couldn't find a student with that username. You can fill the details manually below.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Ok</button>
                </div>
            }
            else
            {
                <!-- Student found, display a card -->
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">Student Found</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@fetchedStudent.FullName</h5>
                            <p class="card-text"><strong>Email:</strong> @fetchedStudent.Email</p>
                            <p class="card-text"><strong>Phone:</strong> @fetchedStudent.MobilePhoneNumber</p>
                            <p class="card-text"><strong>Gender:</strong> @fetchedStudent.Gender</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => SelectFetchedStudent()">Select Student</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string username = "";
    private bool isLoading = false;
    private bool studentFound = false;
    private bool apiError = false;

    private StudentDTO student = new StudentDTO
    {
        // Default empty fields, user can fill manually if desired
    };

    private StudentDTO fetchedStudent; // Temporarily holds the fetched student data

    private ElementReference studentModalRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Setup modal via JS if needed.
            // If using .NET 7 or Blazor components that handle modals, this may not be necessary.
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SearchStudent()
    {
        isLoading = true;
        apiError = false;
        studentFound = false;
        fetchedStudent = null;

        try
        {
            // Simulate an API call - replace with your proxy endpoint or actual API
            // Example endpoint: /api/proxy/studentdata?username={username}
            var response = await Http.GetFromJsonAsync<StudentDTO>($"/api/Proxy/studentdata?username={username}");

            if (response != null && !string.IsNullOrWhiteSpace(response.FirstName))
            {
                // Student found
                fetchedStudent = response;
                studentFound = true;
            }
            else
            {
                // No student found
                studentFound = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching student data: {ex.Message}");
            apiError = true;
        }
        finally
        {
            isLoading = false;
            // Show the modal once the search is done
            await ShowModal();
        }
    }

    private async Task ShowModal()
    {
        // Using Bootstrap 5 modal, we can show/hide using JS Interop.
        // Example JS to show: $('#studentModal').modal('show');
        await JSRuntime.InvokeVoidAsync("bootstrapModalInterop.showModal", "#studentModal");
    }

    private async Task HideModal()
    {
        await JSRuntime.InvokeVoidAsync("bootstrapModalInterop.hideModal", "#studentModal");
    }

    private void SelectFetchedStudent()
    {
        if (fetchedStudent != null)
        {
            student.Username = username;
            student.FirstName = fetchedStudent.FirstName;
            student.LastName = fetchedStudent.LastName;
            student.Email = fetchedStudent.Email;
            student.MobilePhoneNumber = fetchedStudent.MobilePhoneNumber;
            student.Gender = fetchedStudent.Gender;
        }

        // Close modal after selecting student
        JSRuntime.InvokeVoidAsync("bootstrapModalInterop.hideModal", "#studentModal");
    }

    private void SubmitForm()
    {
        // For now, just log the submitted data to the console
        Console.WriteLine("Submitted Student Data:");
        Console.WriteLine($"Username: {student.Username}");
        Console.WriteLine($"Name: {student.FullName}");
        Console.WriteLine($"Email: {student.Email}");
        Console.WriteLine($"Phone: {student.MobilePhoneNumber}");
        Console.WriteLine($"Gender: {student.Gender}");
    }


}
