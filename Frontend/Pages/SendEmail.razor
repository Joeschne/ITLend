@page "/send-email"
@using System.Net.Http.Json
@using Shared.DTOs
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="container mt-4">
    <h3 class="text-center mb-4">Send Email to Teacher</h3>

    <!-- Alert -->
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert @alertClass alert-dismissible fade show" role="alert">
            @alertMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row justify-content-center">
        <div class="col-md-6">
            <!-- Autocomplete field -->
            <div class="mb-3">
                <label for="email" class="form-label">Lehrer-E-Mail</label>
                <input type="text"
                       id="email"
                       class="form-control"
                       placeholder="E-Mail des Lehrers eingeben..."
                       @oninput="e => { searchTerm = e.Value.ToString(); SearchTeachers(); }"
                       list="teacherEmails" />
                <datalist id="teacherEmails">
                    @foreach (var email in filteredEmails)
                    {
                        <option value="@email"></option>
                    }
                </datalist>
            </div>

            <!-- Field with predefined text -->
            <div class="mb-3">
                <label for="message" class="form-label">Nachricht</label>
                <textarea id="message"
                          class="form-control"
                          rows="5"
                          @bind="emailMessage"></textarea>
            </div>

            <!-- Send button -->
            <div class="d-grid">
                <button class="btn btn-primary" @onclick="SendEmails">
                    <i class="bi bi-envelope"></i> Senden
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    private string searchTerm = string.Empty;
    private List<string> filteredEmails = new();
    private string emailMessage = "Bitte nehmen Sie das Notebook von dem Schüler entgegen.";
    private string alertMessage = string.Empty;
    private string alertClass = string.Empty; 

    private async Task SearchTeachers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmails.Clear();
            return;
        }

        var response = await Http.GetFromJsonAsync<List<TeacherDTO>>($"/api/Teacher?search={searchTerm}");
        filteredEmails = response?.Select(t => t.Email).ToList() ?? new List<string>();
    }

    private async Task SendEmails()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            SetAlert("Please enter an email address!", "alert-danger");
            return;
        }

        var request = new
        {
            RecipientEmail = searchTerm,
            Message = emailMessage
        };

        try
        {
            var response = await Http.PostAsJsonAsync("/api/Teacher/send-email", request);

            if (response.IsSuccessStatusCode)
            {
                SetAlert("Email sent successfully!", "alert-success");
            }
            else
            {
                SetAlert("Failed to send email. Please try again later.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            SetAlert($"Error: {ex.Message}", "alert-danger");
        }
    }

    private void SetAlert(string message, string cssClass)
    {
        alertMessage = message;
        alertClass = cssClass;

        // Remove the notification after 5 seconds 
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            alertMessage = string.Empty;
            StateHasChanged();
        });
    }
}
