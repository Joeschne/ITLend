@page "/"
@using Frontend.Interfaces
@using Shared.DTOs
@inject IBookingService BookingService

<div class="container mt-4">
    <h2>Open Bookings</h2>

    <ul class="list-group mt-4">
        @if (OpenBookings == null)
        {
            <li class="list-group-item">Loading...</li>
        }
        else if (!OpenBookings.Any())
        {
            <li class="list-group-item">No open bookings found.</li>
        }
        else
        {
            @foreach (var booking in OpenBookings)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">Student: @booking.StudentUsername</h5>
                        <p class="mb-1">Laptop Model: @booking.Laptop.Model</p>
                        <p class="mb-1">Booking Date: @booking.BookingDateTime.ToString("g")</p>
                        <p class="mb-1">Planned Return: @booking.PlannedReturn.ToString("g")</p>
                        @if (!string.IsNullOrEmpty(booking.Comment))
                        {
                            <p class="text-muted mb-1">Comment: @booking.Comment</p>
                        }
                    </div>
                    <span class="badge bg-warning">Open</span>
                </li>
            }
        }
    </ul>
</div>

@code {
    private List<BookingResponseDTO> OpenBookings;

    protected override async Task OnInitializedAsync()
    {
        OpenBookings = (await BookingService.GetNotReturnedBookingsAsync()).ToList();
    }
}
