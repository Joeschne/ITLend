@using Shared.DTOs

@if (IsVisible && StudentDetail != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);"
         @onkeydown="ShowNewLendingButton ? HandleKeyDown : null"
         @ref="studentModalRef">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@StudentDetail?.Username's Bookings</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Total Bookings: @StudentDetail?.Bookings.Count</p>

                    @if (!StudentDetail?.Bookings.Any() ?? true)
                    {
                        <div class="alert alert-info">
                            No bookings found for this student.
                        </div>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var booking in StudentDetail.Bookings)
                            {
                                <li class="list-group-item">
                                    <div>
                                        <strong>Booking Date:</strong> @booking.BookingDateTime.ToString("g")
                                    </div>
                                    <div>
                                        <strong>Laptop:</strong> @(booking.Laptop?.IdentificationNumber ?? "Unknown")
                                    </div>
                                    @if (!string.IsNullOrEmpty(booking.Comment))
                                    {
                                        <div>
                                            <strong>Comment:</strong> @booking.Comment
                                        </div>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    @if (ShowNewLendingButton)
                    {
                        <button class="btn btn-primary" @onclick="OpenNewLending">New Lending</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Determines if the modal is visible.
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// The details of the student to display.
    /// </summary>
    [Parameter]
    public StudentDetailDTO? StudentDetail { get; set; }

    /// <summary>
    /// Callback triggered when the modal is closed.
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <summary>
    /// Determines if the "New Lending" button is visible.
    /// </summary>
    [Parameter]
    public bool ShowNewLendingButton { get; set; } = false;

    /// <summary>
    /// Callback triggered when "New Lending" is clicked.
    /// </summary>
    [Parameter]
    public EventCallback OnNewLending { get; set; }

    private ElementReference studentModalRef;
    private bool focusOnRender = false; // Flag to control focus after rendering

    /// <summary>
    /// Sets focus flag when modal becomes visible.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && ShowNewLendingButton)
        {
            focusOnRender = true;
        }
    }

    /// <summary>
    /// Attempts to set focus on the modal after rendering.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (focusOnRender)
        {
            focusOnRender = false; // Reset the flag after attempting to focus
            if (studentModalRef.Context != null)
            {
                try
                {
                    await studentModalRef.FocusAsync();
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error focusing student modal: {ex.Message}");
                }
            }
        }
    }

    /// <summary>
    /// Closes the modal and invokes the <see cref="OnClose"/> callback.
    /// </summary>
    private void CloseModal()
    {
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync();
        }
    }

    /// <summary>
    /// Invokes the <see cref="OnNewLending"/> callback for creating a new lending.
    /// </summary>
    private void OpenNewLending()
    {
        if (OnNewLending.HasDelegate)
        {
            OnNewLending.InvokeAsync();
        }
    }

    /// <summary>
    /// Handles the "Enter" key press to trigger the "New Lending" action.
    /// </summary>
    /// <param name="e">The keyboard event arguments.</param>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && ShowNewLendingButton)
        {
            OpenNewLending();
        }
    }
}
